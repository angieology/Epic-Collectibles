[{"/Users/angela.lee/gradient-token-tutorial/front/src/TokensPage/index.js":"1","/Users/angela.lee/gradient-token-tutorial/front/src/TokensPage/TokensList/TokenView/index.js":"2"},{"size":1339,"mtime":1609294468861,"results":"3","hashOfConfig":"4"},{"size":4547,"mtime":1609300103549,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"yx56ae",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/angela.lee/gradient-token-tutorial/front/src/TokensPage/index.js",["10","11","12"],"/Users/angela.lee/gradient-token-tutorial/front/src/TokensPage/TokensList/TokenView/index.js",["13","14"],{"ruleId":"15","severity":1,"message":"16","line":18,"column":19,"nodeType":"17","endLine":18,"endColumn":34},{"ruleId":"15","severity":1,"message":"18","line":19,"column":21,"nodeType":"17","endLine":19,"endColumn":38},{"ruleId":"15","severity":1,"message":"19","line":21,"column":19,"nodeType":"17","endLine":21,"endColumn":34},{"ruleId":"15","severity":1,"message":"20","line":50,"column":6,"nodeType":"21","endLine":50,"endColumn":50,"suggestions":"22"},{"ruleId":"15","severity":1,"message":"23","line":52,"column":3,"nodeType":"24","endLine":52,"endColumn":12,"suggestions":"25"},"react-hooks/exhaustive-deps","Assignments to the 'mintToken' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'fetchTokens' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'isLoading' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'state.owner' and 'tokenID'. Either include them or remove the dependency array.","ArrayExpression",["26"],"React Hook useEffect contains a call to 'setIsOnSale'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [tokensOnSale, tokenID] as a second argument to the useEffect Hook.","Identifier",["27"],{"desc":"28","fix":"29"},{"desc":"30","fix":"31"},"Update the dependencies array to be: [ownerTokens, tokensOnSale, tokenIDToSeller, tokenID, state.owner]",{"range":"32","text":"33"},"Add dependencies array: [tokensOnSale, tokenID]",{"range":"34","text":"35"},[1673,1717],"[ownerTokens, tokensOnSale, tokenIDToSeller, tokenID, state.owner]",[1837,1837],", [tokensOnSale, tokenID]"]